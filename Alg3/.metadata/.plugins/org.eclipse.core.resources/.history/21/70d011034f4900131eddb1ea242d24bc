package wordLadder;

import java.util.ArrayList;
import java.util.LinkedList;

public class Graph {
	private ArrayList<Vertex> vertices;
	//private int size;
	
	public Graph() {
		//this.size = 0;
		this.vertices = new ArrayList<Vertex>();
	}

	public ArrayList<Vertex> getVertices() {
		return vertices;
	}

	public void setVertices(ArrayList<Vertex> vertices) {
		this.vertices = vertices;
	}
	
	public void addToList(Vertex v)
	{
		this.vertices.add(v);
	}
	
	public static boolean checkAdjacency(String s1, String s2)
	{
		int countDiff = 0;
		for (int i = 0; i < s1.length(); i++)
		{
			if(s1.charAt(i) != s2.charAt(i))
				countDiff++;
			if (countDiff > 1)
				return false;
		}
		return true;
	}
	
	public void carryOutWordLadder(String start, String end)
	{
		
	}
	
	public boolean bfs(String start, String end) {
		Vertex vStart = new Vertex();
		Vertex vEnd = new Vertex();
		for (Vertex v : vertices) 
		{
			if (v.getWord().equalsIgnoreCase(start))
				vStart = v;
			else if (v.getWord().equalsIgnoreCase(end))
				vEnd = v;
			v.setDistance(-1);
			v.setVisited(false);
		}
		
		if (vStart.isEmpty() || vEnd.isEmpty())
			return false;		
		
  		LinkedList<Vertex> queue = new LinkedList<Vertex>(); // set up empty queue
  		queue.add(vStart);
  		
		for (Vertex v : vertices) { // go through vertices of the graph
    		if (!v.isVisited()) { // if vertex not visited then visit the vertex
      			v.setVisited(true); // now visited
      			v.setPredecessor(v.getIndex()); // v was initial/starting vertex
      			v.setDistance(0); //initial starting distance is 0
      			queue.add(v); // add to queue to be processed
      			while (!queue.isEmpty()) { // while verticies to process
        			Vertex u = queue.remove(); // get next vertex to process
					LinkedList<AdjListNode> list = u.getAdjList(); // get adjacency list of the vertex
        			for (AdjListNode node : list) { // go through the adjecency list...
						Vertex w = vertices.get(node.getVertexNumber());
						if (!w.isVisited()) { // ...for vertices that have not been visited
							w.setVisited(true); // they have now been visited
							w.setPredecessor(u.getIndex()); 
							w.setDistance(u.getDistance() + 1);// w was found using u so this is the predecessor
							queue.add(w); // add vertex to the queue to be processed
						}
					}
				}
			}
		}
		
		return true;
	}

}
