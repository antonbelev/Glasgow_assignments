package wordLadder;

import java.util.LinkedList;

public class Vertex {
	
	private LinkedList<AdjListNode> adjList; //list with adjesent vetices
	private int index; // the index of the vertex in the graph
	private String word;
	boolean visited; // whether vertex has been visited in a traversal
    int predecessor; // index of predecessor vertex in a traversal
	
	public Vertex (int index)
	{
		this.index = index;
		this.adjList = new LinkedList<AdjListNode>();
	}
	
	public LinkedList<AdjListNode> getAdjList() {
		return adjList;
	}

	public void setAdjList(LinkedList<AdjListNode> adjList) {
		this.adjList = adjList;
	}


	public int getIndex() {
		return index;
	}

	public void setIndex(int index) {
		this.index = index;
	}

	public String getWord() {
		return word;
	}

	public void setWord(String word) {
		this.word = word;
	}


	public boolean isVisited() {
		return visited;
	}


	public void setVisited(boolean visited) {
		this.visited = visited;
	}


	public int getPredecessor() {
		return predecessor;
	}


	public void setPredecessor(int predecessor) {
		this.predecessor = predecessor;
	}


	public void addToAdjList(int n){
        adjList.addLast(new AdjListNode(n));
    }
}
